################################################################################
#
# Routines for managing the representation of the board.
#
################################################################################

# The number of rows on a tic-tac-toe board
.const ROWS 3
# The number of columns on a tic-tac-toe board
.const COLS 3
# The number of tiles on a tic-tac-toe board
.const TILES 9
# A value representing the absence of a value (like null)
.const NONE 0
# The constant value used to repesent piece X
.const PIECE_X 1
# The constant value used to repesent piece O
.const PIECE_O 2
# Total size of the representation of the board
# TILES bytes + 1 byte for current piece (PIECE_X or PIECE_O)
# TILES bytes are the values of each tile stored row-wise
.const BOARD_BYTES 10

################################################################################
#
# Initializes the tic-tac-toe board whose address is in $1
#
################################################################################
init_board:
  push $fp
  mov $fp, $sp

  # Push registers used in this routine
  push $1
  push $2

  # Initialize the board tiles to be empty

  # Address of one past the end of tiles
  mov $2, $1
  add $2, TILES

init_board_tiles:
  cmp $1, $2
  je init_board_current_piece

  # Store NONE in the tile to represent that this tile is empty
  store1 $1, NONE

  add $1, 1
  jmp init_board_tiles

init_board_current_piece:
  # Start the game with X as the current piece
  store1 $1, PIECE_X

  # Pop registers used in this routine
  pop $2
  pop $1

  pop $fp
  ret

################################################################################
#
# Modifies the tic-tac-toe board whose address is in $1 by placing the current
# piece at the position (0-8) stored in $2. Sets the current piece to the
# opposite piece.
#
# This routine assumes that $2 is in the range 0-8 and does *not* check if the
# requested tile is empty before overwriting it.
#
################################################################################
make_move:
  push $fp
  mov $fp, $sp

  # Push registers used in this routine
  push $1
  push $2
  push $3
  push $4

  # Read the current piece into $3
  mov $3, $1
  add $3, TILES
  loadu1 $4, $3

  # Set the selected tile to the current piece
  add $2, $1
  store1 $2, $4

  # Set the current piece to the opposite piece
  # This code works because PIECE_X and PIECE_O are consecutive integers
  mov $2, PIECE_O
  sub $2, $4
  add $2, PIECE_X
  store1 $3, $2

  # Pop registers used in this routine
  pop $4
  pop $3
  pop $2
  pop $1

  pop $fp
  ret

################################################################################
#
# Gets the current piece from the board whose address is in $1 and stores
# PIECE_X or PIECE_O in $2.
#
################################################################################
current_piece:
  push $fp
  mov $fp, $sp

  mov $2, $1
  add $2, TILES
  loadu1 $2, $2

  pop $fp
  ret

################################################################################
#
# Checks the board whose address is in $1 to see if the game has been won.
# Stores NONE, PIECE_X, or PIECE_O in $2.
#
################################################################################
check_winner:
  push $fp
  mov $fp, $sp

  # Push registers used in this routine
  push $3
  push $4
  push $5
  push $6
  push $7
  push $11
  push $12
  push $21
  push $22

  # Start with no winner
  mov $2, NONE

  ###### Check each row and each column ######

  # Address of tile in current row
  mov $21, $1

  # Row counter
  mov $11, 0

check_winner_rows:
  cmp $11, ROWS
  jae check_winner_diagonals

  # Address of tile in current column
  mov $22, $1
  # Add row counter to get to the start address of the current column (works
  # because board is square so proceeding through columns is the same as
  # proceeding through rows with an additional offset)
  add $22, $11

  # The last value found in the current tile of the current row
  loadu1 $3, $21
  # The number of times this value has been found in the current row
  mov $4, 0
  # The last value found in the current tile of the current column
  loadu1 $5, $22
  # The number of times this value has been found in the current column
  mov $6, 0

  # Column counter
  mov $12, 0

check_winner_cols:
  cmp $12, COLS
  jae check_winner_cols_done

check_winner_row_tile:
  # Check value of current row
  loadu1 $7, $21
  cmp $3, $7
  jne check_winner_col_tile

  # Found a tile that is the same
  add $4, 1

check_winner_col_tile:
  # Check value of current row
  loadu1 $7, $22
  cmp $5, $7
  jne check_winner_tile_done

  # Found a tile that is the same
  add $6, 1

check_winner_tile_done:
  # Move to next address in current row
  add $21, 1
  # Move to next address in current column
  add $22, COLS

  # Increment column counter
  add $12, 1

  jmp check_winner_cols

check_winner_cols_done:
check_winner_row_win:
  # Check if a winner was found in the current row
  cmp $3, NONE
  je check_winner_col_win
  cmp $4, COLS
  jne check_winner_col_win

  # Return winner
  mov $2, $3
  jmp check_winner_done

check_winner_col_win:
  # Check if a winner was found in the current column
  cmp $5, NONE
  je check_winner_cols_continue
  cmp $6, ROWS
  jne check_winner_cols_continue

  # Return winner
  mov $2, $5
  jmp check_winner_done

check_winner_cols_continue:
  # Increment row counter
  add $11, 1

  jmp check_winner_rows

check_winner_diagonals:
  ###### Check each diagonal (assumes board is square and 3x3) ######

  # Address of first tile in diagonal 1 (top-left to bottom-right)
  mov $21, $1

  # Address of first tile in diagonal 2 (top-right to bottom-left)
  mov $22, $1
  add $22, COLS
  sub $22, 1

  # The first value in diagonal 1
  loadu1 $3, $21
  # The number of times this value was found in diagonal 1
  mov $4, 0
  # The first value in diagonal 2
  loadu1 $5, $22
  # The number of times this value was found in diagonal 2
  mov $6, 0

  # Counter for both diagonals (assumes board is square)
  mov $11, 0

check_winner_diagonals_loop:
  # Works assuming board is square
  cmp $11, ROWS
  jae check_winner_diagonals_done

check_winner_diagonal1_tile:
  # Check value of diagonal 1
  loadu1 $7, $21
  cmp $3, $7
  jne check_winner_diagonal2_tile

  # Found a tile that is the same
  add $4, 1

check_winner_diagonal2_tile:
  # Check value of diagonal 2
  loadu1 $7, $22
  cmp $5, $7
  jne check_winner_diagonals_tile_done

  # Found a tile that is the same
  add $6, 1

check_winner_diagonals_tile_done:
  # Move to next diagonal 1 address
  # Assumes board is 3x3
  add $21, 4
  # Move to next diagonal 2 address
  # Assumes board is 3x3
  add $22, 2

  # Increment diagonal counter
  add $11, 1

  jmp check_winner_diagonals_loop

check_winner_diagonals_done:
check_winner_diagonal1_win:
  # Check if a winner was found in diagonal 1 (assumes board is square)
  cmp $3, NONE
  je check_winner_diagonal2_win
  cmp $4, ROWS
  jne check_winner_diagonal2_win

  # Return winner
  mov $2, $3
  jmp check_winner_done

check_winner_diagonal2_win:
  # Check if a winner was found in diagonal 2 (assumes board is square)
  cmp $5, NONE
  je check_winner_done
  cmp $6, ROWS
  jne check_winner_done

  # Return winner
  mov $2, $5
  jmp check_winner_done

check_winner_done:
  # Pop registers used in this routine
  pop $22
  pop $21
  pop $12
  pop $11
  pop $7
  pop $6
  pop $5
  pop $4
  pop $3

  pop $fp
  ret

################################################################################
#
# Given a board whose address is in $1, counts the empty tiles and places the
# count (between 0 and 9) into $2.
#
################################################################################
check_board_empty_tiles:
  push $fp
  mov $fp, $sp

  # Push registers used in this routine
  push $1
  push $3
  push $4

  # There can be up to TILES empty tiles
  mov $2, TILES

  # The address one past the end of the tiles
  mov $3, $1
  add $3, $2

check_board_empty_tiles_loop:
  cmp $1, $3
  jae check_board_empty_tiles_done

  # Load the tile value
  loadu1 $4, $1

  # Check if empty
  cmp $4, NONE
  je check_board_empty_tiles_continue

  # Found non-empty tile
  sub $2, 1

check_board_empty_tiles_continue:
  # Continue to the next tile
  add $1, 1

  jmp check_board_empty_tiles_loop

check_board_empty_tiles_done:
  # Pop registers used in this routine
  pop $4
  pop $3
  pop $1

  pop $fp
  ret
