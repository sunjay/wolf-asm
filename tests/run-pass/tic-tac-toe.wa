# Plays the game tic-tac-toe
#
# When prompted for your move, you will be asked to enter a number between
# 1 and 9. The tiles are numbered as follows:
#
#     -------------
#     | 1 | 2 | 3 |
#     -------------
#     | 4 | 5 | 6 |
#     -------------
#     | 7 | 8 | 9 |
#     -------------

.const STDIN 0xffff_0004

section .code

main:
  push $fp
  mov $fp, $sp

  # Push registers used in this routine
  push $1
  push $2

  # Allocate a board sized block on the stack
  sub $sp, BOARD_BYTES
  # This will be the address of the board representation
  mov $1, $sp

  # Initialize the board memory
  call init_board

main_loop:
  # Print the current state of the board
  call print_board
  call print_newline

  # Check if the game is over
  call check_winner
  cmp $2, PIECE_X
  je main_print_winner_x
  cmp $2, PIECE_O
  je main_print_winner_o

  # Check if the board is full (tie)
  call check_board_empty_tiles
  cmp $2, 0
  je main_print_tie

  call print_current_piece
  # Ask for a move from the user
  call prompt_move
  # Check for EOF
  cmp $2, 0
  je main_done
  # Put the move into the range 0-8
  sub $2, 1

  # Make the move that the user requested
  call make_move

  # Continue looping
  jmp main_loop

main_print_winner_x:
  mov $1, x_wins_message
  call print_ntstring
  call print_newline

  jmp main_done

main_print_winner_o:
  mov $1, o_wins_message
  call print_ntstring
  call print_newline

  jmp main_done

main_print_tie:
  mov $1, tie_message
  call print_ntstring
  call print_newline

  jmp main_done

main_done:
  # Free the board sized region on the stack
  add $sp, BOARD_BYTES

  # Pop registers used in this routine
  pop $2
  pop $1

  pop $fp
  ret

################################################################################
#
# Prints the current piece of board whose address is stored in $1
#
################################################################################
print_current_piece:
  push $fp
  mov $fp, $sp

  # Push registers used in this routine
  push $0
  push $1
  push $2

  mov $0, STDOUT

  # Get the current piece
  call current_piece

  mov $1, current_piece_message
  call print_ntstring

  # Print the piece
  cmp $2, PIECE_X
  jne print_current_piece_o

print_current_piece_x:
  store1 $0, CHAR_X

  jmp print_current_piece_done

print_current_piece_o:
  store1 $0, CHAR_O

print_current_piece_done:
  # End with a newline
  call print_newline

  # Pop registers used in this routine
  pop $2
  pop $1
  pop $0

  pop $fp
  ret

################################################################################
#
# Prompts the player for a move and stores the move (1-9) in $2
#
# Returns 0 into $2 at EOF
#
################################################################################
prompt_move:
  push $fp
  mov $fp, $sp

  # Push registers used in this routine
  push $1
  push $3
  push $4

  # Save the board separately so we can use it later
  mov $3, $1

prompt_move_ask:
  # Print the move prompt
  mov $1, move_prompt
  call print_ntstring

  # Load the next character of the input
  loadu1 $2, STDIN
  # Quit at EOF
  cmp $2, 0
  jz prompt_move_eof

  # Put the selected move into $1 for use later
  mov $1, $2

  # Count the number of non-newline characters
  mov $4, 0

prompt_move_until_newline:
  # If the character is not a newline, continue reading until a newline is
  # consumed
  # ASCII 10 = newline `\n`
  cmp $2, 10
  je prompt_move_validate

  # Count the number of non-newline characters
  add $4, 1

  # Load the next character of the input
  loadu1 $2, STDIN
  # Quit at EOF
  cmp $2, 0
  jz prompt_move_eof

  jmp prompt_move_until_newline

prompt_move_eof:
  # Print a newline at EOF to complete the prompt line
  call print_newline
  jmp prompt_move_done

prompt_move_validate:
  # Put the move into $2 and restore the board into $1
  mov $2, $1
  mov $1, $3

  # The move should be exactly 1 character
  cmp $4, 1
  jne prompt_move_ask

  # The move should be in the range 1 to 9
  # Subtract ASCII 48 = '0' to get a value that is potentially between 1 and 9
  sub $2, 48
  # Check if the move is out of range
  cmp $2, 1
  jb prompt_move_ask
  cmp $2, 9
  ja prompt_move_ask

  # Check if tile is empty
  mov $4, $1
  add $4, $2
  sub $4, 1
  loadu1 $4, $4
  cmp $4, NONE
  jne prompt_move_ask

  # Extra newline for better formatting after prompt
  call print_newline

prompt_move_done:
  # Pop registers used in this routine
  pop $4
  pop $3
  pop $1

  pop $fp
  ret

.include 'tic-tac-toe/board.wa'
.include 'tic-tac-toe/printer.wa'

section .static

current_piece_message:
  .bytes 'Current piece: \0'

move_prompt:
  .bytes 'Enter your move (1-9): \0'

x_wins_message:
  .bytes 'X wins!\0'

o_wins_message:
  .bytes 'O wins!\0'

tie_message:
  .bytes 'Tie!\0'
